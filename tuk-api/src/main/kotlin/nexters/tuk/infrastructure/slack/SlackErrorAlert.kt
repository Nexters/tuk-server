package nexters.tuk.infrastructure.slack

import com.slack.api.model.block.Blocks
import com.slack.api.model.block.LayoutBlock
import com.slack.api.model.block.composition.BlockCompositions
import com.slack.api.model.block.composition.MarkdownTextObject
import java.time.ZoneId
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

data class SlackErrorAlert(
    val statusCode: Int,
    val httpMethod: String,
    val path: String,
    val occurredAt: ZonedDateTime,
    val errorMessage: String,
    val requestParamsJson: String
) {
    private fun kstString(): String =
        occurredAt.withZoneSameInstant(ZoneId.of("Asia/Seoul"))
            .format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss z"))

    fun toBlocks(): List<LayoutBlock> {
        val isServerError = statusCode >= 500
        val blocks = mutableListOf<LayoutBlock>()

        // 5xxÎ©¥ Îß® ÏúÑÏóê Î©òÏÖò(ÏïåÎ¶º Ìä∏Î¶¨Í±∞)
        if (isServerError) {
            blocks += Blocks.section { it.text(MarkdownTextObject("<!here>", false)) }
        }

        // Ï†úÎ™©ÏùÄ header Î∏îÎ°ù(Í∞ÄÎèÖÏÑ± ÏµúÍ≥†)
        blocks += Blocks.header {
            it.text(BlockCompositions.plainText("üö® [$statusCode] Internal Server Error", true))
        }

        // ÏöîÏïΩ(ÎßàÌÅ¨Îã§Ïö¥ Î∂àÎ¶ø Î¶¨Ïä§Ìä∏Î°ú ÏãúÏõêÌïòÍ≤å)
        val summaryMd = """
            *ÏöîÏïΩ*
            ‚Ä¢ *ÏÉÅÌÉú ÏΩîÎìú*: `$statusCode`
            ‚Ä¢ *HTTP Î©îÏÑúÎìú*: `$httpMethod`
            ‚Ä¢ *Í≤ΩÎ°ú*: `$path`
            ‚Ä¢ *Î∞úÏÉù ÏãúÍ∞Å*: `${kstString()}`
        """.trimIndent()
        blocks += Blocks.section { it.text(MarkdownTextObject(summaryMd, false)) }

        blocks += Blocks.divider()

        // ÏóêÎü¨ Î©îÏãúÏßÄ(ÏΩîÎìúÎ∏îÎ°ù)
        val errorMd = "‚ùå *ÏóêÎü¨ Î©îÏãúÏßÄ*\n```$errorMessage```"
        blocks += Blocks.section { it.text(MarkdownTextObject(errorMd, false)) }

        // ÏöîÏ≤≠ ÌååÎùºÎØ∏ÌÑ∞(ÏΩîÎìúÎ∏îÎ°ù, ÎπÑÏñ¥ÏûàÏßÄ ÏïäÏùÑ ÎïåÎßå)
        if (requestParamsJson.isNotBlank()) {
            val paramsMd = "üì¶ *ÏöîÏ≤≠ ÌååÎùºÎØ∏ÌÑ∞*\n```$requestParamsJson```"
            blocks += Blocks.section { it.text(MarkdownTextObject(paramsMd, false)) }
        }

        return blocks
    }

    // Í≤ÄÏÉâ/Î™®Î∞îÏùºÏö© Ìè¥Î∞± ÌÖçÏä§Ìä∏(5xxÎäî Î©òÏÖò Ìè¨Ìï®)
    fun fallbackText(): String {
        val prefix = if (statusCode >= 500) "<!here> " else ""
        return prefix + "[$statusCode] $httpMethod $path @ ${kstString()}: $errorMessage"
    }
}